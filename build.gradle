buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

version = '1.2v16'
group = 'com.igteam.immersive_geology' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'immersive_geology'

repositories {
    maven {	name = "BlameJared";	url = "https://maven.blamejared.com/" }         // IE & CT Files
    maven { name = "DVS1 Maven FS"; url = "https://dvs1.progwml6.com/files/maven" } // JEI & Tinkers Files
    maven { url = 'https://maven.latmod.com/' }                                     // Needed for JEI
}

sourceSets {
    api {
        compileClasspath = main.compileClasspath
    }
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources",
            ]
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                immersive_geology {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            arg '-nogui'

            mods {
                immersive_geology {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'immersive_geology',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--validate',
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--existing-mod', 'immersiveengineering'

            mods {
                immersive_geology {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.datagen
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.16.5-36.2.22"
    compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143")
    datagenCompile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143:datagen")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75")
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75:api")
}


def version_replaces = [
        'version': version_ig,
        'mc_version': minecraft_version_range,
        'forge_version': version_forge,
        'ie_version': ie_version_range
]

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filesMatching("META-INF/mods.toml") {
        expand version_replaces
    }
}

// When using "Run using IntelliJ" (the only option with well-working hotswapping) the used "resources" directory is
// different from the one used by gradle/the processResources task
task copyModsTomlForIntelliJ(type: Copy) {
    from processResources.destinationDir
    into "$projectDir/out/production/resources"
    include "META-INF/mods.toml"
}

copyModsTomlForIntelliJ.dependsOn processResources
afterEvaluate {
    // prepareRuns doesn't exist before afterEvaluate
    prepareRuns.dependsOn copyModsTomlForIntelliJ
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes([
                "Specification-Title"     : "immersive_geology",
                "Specification-Vendor"    : "ig_team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ig_team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName

            artifact jar

            pom {
                name = project.archivesBaseName
                description = project.archivesBaseName
                url = 'https://www.curseforge.com/minecraft/mc-mods/immersive-geology'
                scm {
                    url = 'https://github.com/Immersive-Geology-Team/Immersive-Geology/'
                    connection = 'scm:git:git@github.com/Immersive-Geology-Team/Immersive-Geology.git'
                    developerConnection = 'scm:git:git@github.com/Immersive-Geology-Team/Immersive-Geology.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/Immersive-Geology-Team/Immersive-Geology/issues'
                }

                developers {
                    developer {
                        id = 'Muddykat'
                        name = 'Muddykat'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Running this is equivalent to running genIntellijRuns, but it exists before afterEvaluate
task genIntellijRunsDummy {}

tasks.withType(Task) {
    if (it.name == "genIntellijRuns") {
        genIntellijRunsDummy.dependsOn it
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version "$neogradle_version"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

version = mod_version
group = mod_group_id
archivesBaseName = mod_name + '-' + mod_version

repositories {
    maven {	name = "BlameJared";	url = "https://maven.blamejared.com/" }
    maven { name = "DVS1 Maven FS"; url = "https://dvs1.progwml6.com/files/maven" }
    maven {
        url "https://maven.teamresourceful.com/repository/maven-public/"
    }
}

// Include resources generated by data igteam.immersivegeology.generators.
sourceSets {
    main {
        resources {
            srcDirs = [
                "$rootDir/src/main/resources",
                "$rootDir/src/generated/resources"
            ]
        }
    }
    datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

def version_map = [
        'mc_version'		        : minecraft_version,
        'minecraft_version_range'   : minecraft_version_range,
        'neoforge_version'	        : neo_version,
        'mod_version'		        : project.version,
        'ie_version'		        : ie_version,
        'loader_version_range'      : loader_version_range,
        'jei_version'		        : jei_version,
        'mod_license'               : mod_license,
        'mod_id'                    : mod_id,
        'mod_name'                  : mod_name,
        'mod_authors'               : mod_authors,
        'mod_description'           : mod_description,
        'neo_version_range'         : neo_version_range
]

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    inputs.properties(version_map)
    filesMatching("META-INF/mods.toml") {
        expand version_map
    }
    exclude ".cache"
}

runs {
    // applies to all the run configs below
    configureEach {
        workingDirectory project.file('run')
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info'
        systemProperty 'fml.earlyprogresswindow', 'false'

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        modSource project.sourceSets.main
    }

    client
    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', 'immersivegeology', '--all', '--output', file('src/generated/resources/').toString(),
                '--validate', '--existing-mod', 'immersiveengineering', '--existing', sourceSets.main.resources.srcDirs[0].toString()
        modSource sourceSets.datagen
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // JEI
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"

    // IE
    implementation "blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}"
    datagenImplementation "blusunrize.immersiveengineering:ImmersiveEngineering:${ie_version}:datagen"

    // Ad Astra
    implementation "earth.terrarium.adastra:adastra-${mod_loader}-${minecraft_version}:${ad_astra_version}"

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
